/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    ListNode merge (ListNode ll1 , ListNode ll2){
        ListNode l1 = ll1;
        ListNode l2 = ll2;
        ListNode dummy = new ListNode(0);
        ListNode temp = dummy;
        while(l1 != null && l2 != null){
            if(l1.val < l2.val){
                temp.next = l1;
                l1 = l1.next;
            }
            else{
                temp.next = l2;
                l2 = l2.next;
            }
            temp = temp.next;
        }
        if(l1 != null){
            temp.next = l1;
        }
        if(l2 != null){
            temp.next = l2;
        }
        return dummy.next;
    }
    ListNode mergeSort(ListNode ll1){
        if(ll1.next == null) return ll1;

        ListNode f = ll1;
        ListNode s = ll1;
        while(f.next != null && f.next.next != null){
            f = f.next.next;
            s = s.next;
        }
        ListNode ll2 = s.next;
        s.next = null;

        ll1 = mergeSort(ll1);
        ll2 = mergeSort(ll2);
        return merge(ll1 , ll2);

    }
    public ListNode sortList(ListNode head) {
        if(head == null) return null;
        return mergeSort(head);
    }
}
